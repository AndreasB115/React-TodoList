{"version":3,"sources":["components/TodoListTemplate.js","components/Form.js","components/TodoItem.js","components/TodoItemList.js","App.js","serviceWorker.js","index.js"],"names":["TodoListTemplate","_ref","form","children","react_default","a","createElement","className","Form","value","onChange","onCreate","onKeyPress","onClick","TodoItem","nextProps","nextState","this","props","checked","_this$props","text","id","onToggle","onRemove","console","log","e","stopPropagation","concat","Component","TodoItemList","todos","todoList","map","src_components_TodoItem","key","App","state","input","handleChange","_this","setState","target","handleCreate","_this$state","handleKeyPress","handleToggle","index","findIndex","todo","selected","nextTodos","Object","toConsumableArray","objectSpread","handleRemove","filter","_this$state2","src_components_TodoListTemplate","src_components_Form","components_TodoItemList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.40780d2f.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoListTemplate.css';\n\nconst TodoListTemplate = ({form, children}) => {\n    return (\n        <main className=\"todo-list-template\">\n            <div className=\"title\">\n                List of Today\n            </div>\n            <section className=\"form-wrapper\">\n                {form}\n            </section>\n            <section className=\"todos-wrapper\">\n                {children}\n            </section>\n        </main>\n    );\n};\n\nexport default TodoListTemplate;","import React from 'react';\nimport './Form.css';\n\nconst Form = ({value, onChange, onCreate, onKeyPress}) => {\n    return (\n        <div className=\"form\">\n            <input value={value} onChange={onChange} onKeyPress={onKeyPress} />\n            <div className=\"create-button\" onClick={onCreate}>\n                Add\n            </div>\n        </div>\n    );\n};\n\nexport default Form;","import React , {Component} from 'react';\nimport './TodoItem.css';\n\nclass TodoItem extends Component {\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return this.props.checked !== nextProps.checked;\n    }\n\n    render () {\n        const {text, checked, id, onToggle, onRemove } = this.props;\n        console.log(id);\n        return (\n            <div className=\"todo-item\" onClick={() => onToggle(id)}>\n                <div className=\"remove\" onClick={(e) => {\n                    e.stopPropagation();\n                    onRemove(id)\n                }}>\n                    &times;\n                </div>\n                <div className={`todo-text ${checked && 'checked'}`}>\n                    <div>{text}</div>\n                </div>\n                {\n                    checked && (<div className=\"check-mark\">âœ“</div>)\n                }\n            </div>\n        );\n    }\n}\n\nexport default TodoItem;","import React, {Component} from 'react';\nimport TodoItem from './TodoItem';\n\nclass TodoItemList extends Component {\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return nextProps.todos !== this.props.todos;\n    }\n\n    render() {\n        const {todos, onToggle, onRemove} = this.props;\n\n        const todoList = todos.map(\n            ({id, text, checked}) => (\n                <TodoItem\n                    id={id}\n                    text={text}\n                    checked={checked}\n                    onToggle={onToggle}\n                    onRemove={onRemove}\n                    key={id}\n                />\n            )\n        );\n\n        return(\n            <div>\n                {todoList}\n            </div>\n        );\n    };\n}\n\nexport default TodoItemList;","import React, {Component} from 'react';\nimport TodoListTemplate from './components/TodoListTemplate';\nimport Form from './components/Form';\nimport TodoItemList from './components/TodoItemList';\nclass App extends Component {\n\n  id = 3;\n\n  state = {\n    input: '',\n    todos: [\n      {id:0, text: ' Hello React', checked:false},\n      {id:1, text: ' Welcome React', checked:true},\n      {id:2, text: ' Well React', checked:false},\n    ]\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      input: e.target.value\n    });\n  }\n\n  handleCreate = () => {\n    const {input, todos} = this.state;\n    this.setState({\n      input: '',\n      todos:todos.concat({\n        id: this.id++,\n        text:input,\n        checked:false\n      })\n    });\n  }\n\n  handleKeyPress = (e) => {\n    if(e.key === 'Enter') {\n      this.handleCreate();\n    }\n  }\n\n  handleToggle = (id) => {\n    const {todos} = this.state;\n    const index = todos.findIndex(todo => todo.id === id);\n    const selected = todos[index];\n\n    const nextTodos = [...todos];\n\n    nextTodos[index] = {\n      ...selected,\n      checked:!selected.checked\n    };\n\n    this.setState({\n      todos: nextTodos\n    })\n  }\n\n  handleRemove = (id) => {\n    const { todos } = this.state;\n    this.setState({\n      todos:todos.filter(todo => todo.id !== id)\n    })\n  }\n\n  render () {\n  \n    const {input, todos} = this.state;\n    const {\n      handleChange,\n      handleCreate,\n      handleKeyPress,\n      handleToggle,\n      handleRemove\n    } = this;\n\n    return (\n      <TodoListTemplate form={\n        <Form \n          value={input}\n          onKeyPress={handleKeyPress}\n          onChange={handleChange}\n          onCreate={handleCreate}\n        />\n      }>\n        <TodoItemList todos={todos} onToggle={handleToggle} onRemove={handleRemove}/>\n      </TodoListTemplate>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}